{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Figmagen \u00b6 Generate tokens from Figma easily for multiple languages or frameworks Download \u00b6 dependencies { implementation ( \"com.stuart.figmagen:figmagen-core: $ version \" ) // Kotlin Compose extensions implementation ( \"com.stuart.figmagen:figmagen-kotlin-compose-ext: $ version \" ) } Usage \u00b6 Create a new instance of Figmagen : // figmaToken is optional as it can be provided // using `FIGMA_TOKEN` environment variable val figmagen = Figmagen ( figmaToken = \"...\" ) Add tasks to Figmagen : val kotlinComposeColorsTask : Task = KotlinComposeColorsTask ( packageName = \"com.stuart.shared.ui.design.system.core\" , checkColorCorrectness = true , outputPath = \"some/path/to/module/with/Colors.kt\" , ThemeFile ( \"light\" , FileKey ( \"auAVu6zRJ39zECKv6hWDmH\" )), ThemeFile ( \"dark\" , FileKey ( \"wizOikAT1Wigtx6zHpfC87\" )), ) figmagen . addTask ( kotlinComposeColorsTask ) Generate all files from all tasks figmagen . generate () Basic tasks \u00b6 The basic tasks are generic tasks which fetch info from Figma files. They have to be extended to add the functionality of each language or platform, for example KotlinComposeColorsTask extends ColorsTask and it has default bindings to generate Kotlin classes, properties and so on. There are default implementations for all tasks, but if one is missing, they can be extended easily to adapt your needs. Feels free to ask for more tasks or contribute them :) ColorsTask \u00b6 After providing a list of theme files, it has a getColors function with return a list of all colors of all themes provided. Extending ColorsTask \u00b6 themeFiles has to be overridden providing them. run function has to be overridden and should return the list of TaskFile that will be generated. Use getColors function to easily provides a list of TaskFile to the run function. Implementation for basic tasks \u00b6 ColorTasks \u00b6 Kotlin Compose Colors task","title":"Overview"},{"location":"#figmagen","text":"Generate tokens from Figma easily for multiple languages or frameworks","title":"Figmagen"},{"location":"#download","text":"dependencies { implementation ( \"com.stuart.figmagen:figmagen-core: $ version \" ) // Kotlin Compose extensions implementation ( \"com.stuart.figmagen:figmagen-kotlin-compose-ext: $ version \" ) }","title":"Download"},{"location":"#usage","text":"Create a new instance of Figmagen : // figmaToken is optional as it can be provided // using `FIGMA_TOKEN` environment variable val figmagen = Figmagen ( figmaToken = \"...\" ) Add tasks to Figmagen : val kotlinComposeColorsTask : Task = KotlinComposeColorsTask ( packageName = \"com.stuart.shared.ui.design.system.core\" , checkColorCorrectness = true , outputPath = \"some/path/to/module/with/Colors.kt\" , ThemeFile ( \"light\" , FileKey ( \"auAVu6zRJ39zECKv6hWDmH\" )), ThemeFile ( \"dark\" , FileKey ( \"wizOikAT1Wigtx6zHpfC87\" )), ) figmagen . addTask ( kotlinComposeColorsTask ) Generate all files from all tasks figmagen . generate ()","title":"Usage"},{"location":"#basic-tasks","text":"The basic tasks are generic tasks which fetch info from Figma files. They have to be extended to add the functionality of each language or platform, for example KotlinComposeColorsTask extends ColorsTask and it has default bindings to generate Kotlin classes, properties and so on. There are default implementations for all tasks, but if one is missing, they can be extended easily to adapt your needs. Feels free to ask for more tasks or contribute them :)","title":"Basic tasks"},{"location":"#colorstask","text":"After providing a list of theme files, it has a getColors function with return a list of all colors of all themes provided.","title":"ColorsTask"},{"location":"#extending-colorstask","text":"themeFiles has to be overridden providing them. run function has to be overridden and should return the list of TaskFile that will be generated. Use getColors function to easily provides a list of TaskFile to the run function.","title":"Extending ColorsTask"},{"location":"#implementation-for-basic-tasks","text":"","title":"Implementation for basic tasks"},{"location":"#colortasks","text":"Kotlin Compose Colors task","title":"ColorTasks"},{"location":"projects/exts/figmagen-kotlin-compose-ext/figmagen-kotlin-compose-ext/","text":"Module figmagen-kotlin-compose-ext \u00b6 KotlinComposeColorsTask \u00b6 The Kotlin Compose task generates a file with all the necessary info, a sample of this can be seen here It needs 4 arguments: packageName: String : The package that the generated file will have at the top. checkColorCorrectness: Boolean : If there are more than one theme, it can check all themes has the same number and names of color tokens. If one is missing in one theme, it crashes indicating the missing one/s. outputPath: String : The path where the file will be generated a varargs of ThemeFile : the list of figma files associated to a specific theme by name. Sample: val kotlinComposeColorsTask : Task = KotlinComposeColorsTask ( packageName = \"com.stuart.shared.ui.design.system.core\" , checkColorCorrectness = true , outputPath = \"some/path/to/module/with/Colors.kt\" , ThemeFile ( \"light\" , FileKey ( \"auAVu6zRJ39zECKv6hWDmH\" )), ThemeFile ( \"dark\" , FileKey ( \"wizOikAT1Wigtx6zHpfC87\" )), )","title":"figmagen-kotlin-compose-ext"},{"location":"projects/exts/figmagen-kotlin-compose-ext/figmagen-kotlin-compose-ext/#module-figmagen-kotlin-compose-ext","text":"","title":"Module figmagen-kotlin-compose-ext"},{"location":"projects/exts/figmagen-kotlin-compose-ext/figmagen-kotlin-compose-ext/#kotlincomposecolorstask","text":"The Kotlin Compose task generates a file with all the necessary info, a sample of this can be seen here It needs 4 arguments: packageName: String : The package that the generated file will have at the top. checkColorCorrectness: Boolean : If there are more than one theme, it can check all themes has the same number and names of color tokens. If one is missing in one theme, it crashes indicating the missing one/s. outputPath: String : The path where the file will be generated a varargs of ThemeFile : the list of figma files associated to a specific theme by name. Sample: val kotlinComposeColorsTask : Task = KotlinComposeColorsTask ( packageName = \"com.stuart.shared.ui.design.system.core\" , checkColorCorrectness = true , outputPath = \"some/path/to/module/with/Colors.kt\" , ThemeFile ( \"light\" , FileKey ( \"auAVu6zRJ39zECKv6hWDmH\" )), ThemeFile ( \"dark\" , FileKey ( \"wizOikAT1Wigtx6zHpfC87\" )), )","title":"KotlinComposeColorsTask"},{"location":"reports/all-tests/","text":"All tests \u00b6","title":"All tests"},{"location":"reports/all-tests/#all-tests","text":"","title":"All tests"},{"location":"reports/code-analysis/","text":"Code analysis \u00b6","title":"Code analysis"},{"location":"reports/code-analysis/#code-analysis","text":"","title":"Code analysis"},{"location":"reports/code-coverage/","text":"Code coverage \u00b6","title":"Code coverage"},{"location":"reports/code-coverage/#code-coverage","text":"","title":"Code coverage"},{"location":"reports/code-quality/","text":"Code quality \u00b6","title":"Code quality"},{"location":"reports/code-quality/#code-quality","text":"","title":"Code quality"}]}