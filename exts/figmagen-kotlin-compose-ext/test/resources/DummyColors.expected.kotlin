package com.stuart.shared.ui.design.system.core

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color

internal val lightColors: Colors =
    Colors(
        primary = lightPrimary,
        surface = lightSurface,
        contrast = lightContrast,
    )

private val lightPrimary: Colors.Primary
    get() =
        Colors.Primary(
            soft = lightPrimarySoft,
            main = lightPrimaryMain,
            nested = lightPrimaryNested,
        )

private val lightPrimarySoft: Color
    get() =
        Color(
            red = 0.8F,
            green = 0.87058824F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryMain: Color
    get() =
        Color(
            red = 0.0F,
            green = 0.35686275F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryNested: Colors.Primary.Nested
    get() =
        Colors.Primary.Nested(
            main = lightPrimaryNestedMain,
        )

private val lightPrimaryNestedMain: Color
    get() =
        Color(
            red = 0.525F,
            green = 0.7435F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightSurface: Colors.Surface
    get() =
        Colors.Surface(
            contrast = lightSurfaceContrast,
            main = lightSurfaceMain,
        )

private val lightSurfaceContrast: Color
    get() =
        Color(
            red = 0.21568628F,
            green = 0.25490198F,
            blue = 0.31764707F,
            alpha = 1.0F,
        )

private val lightSurfaceMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightContrast: Colors.Contrast
    get() =
        Colors.Contrast(
            main = lightContrastMain,
            soft = lightContrastSoft,
        )

private val lightContrastMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightContrastSoft: Color
    get() =
        Color(
            red = 0.8509804F,
            green = 0.8509804F,
            blue = 0.8509804F,
            alpha = 1.0F,
        )

internal val darkColors: Colors =
    Colors(
        primary = darkPrimary,
        surface = darkSurface,
        contrast = darkContrast,
    )

private val darkPrimary: Colors.Primary
    get() =
        Colors.Primary(
            nested = darkPrimaryNested,
            soft = darkPrimarySoft,
            main = darkPrimaryMain,
        )

private val darkPrimaryNested: Colors.Primary.Nested
    get() =
        Colors.Primary.Nested(
            main = darkPrimaryNestedMain,
        )

private val darkPrimaryNestedMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.714F,
            blue = 0.45F,
            alpha = 1.0F,
        )

private val darkPrimarySoft: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.908F,
            blue = 0.8F,
            alpha = 1.0F,
        )

private val darkPrimaryMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.54F,
            blue = 0.0F,
            alpha = 1.0F,
        )

private val darkSurface: Colors.Surface
    get() =
        Colors.Surface(
            contrast = darkSurfaceContrast,
            main = darkSurfaceMain,
        )

private val darkSurfaceContrast: Color
    get() =
        Color(
            red = 0.92083335F,
            green = 0.92083335F,
            blue = 0.92083335F,
            alpha = 1.0F,
        )

private val darkSurfaceMain: Color
    get() =
        Color(
            red = 0.16666667F,
            green = 0.16666667F,
            blue = 0.16666667F,
            alpha = 1.0F,
        )

private val darkContrast: Colors.Contrast
    get() =
        Colors.Contrast(
            main = darkContrastMain,
            soft = darkContrastSoft,
        )

private val darkContrastMain: Color
    get() =
        Color(
            red = 0.20833333F,
            green = 0.20833333F,
            blue = 0.20833333F,
            alpha = 1.0F,
        )

private val darkContrastSoft: Color
    get() =
        Color(
            red = 0.6375F,
            green = 0.6375F,
            blue = 0.6375F,
            alpha = 1.0F,
        )

@Stable
public class Colors(
    public val primary: Primary,
    public val surface: Surface,
    public val contrast: Contrast,
) {

    internal fun update(
        other: Colors,
    ) {
        primary.update(other.primary)
        surface.update(other.surface)
        contrast.update(other.contrast)
    }

    internal fun copy(
        primary: Primary = this.primary,
        surface: Surface = this.surface,
        contrast: Contrast = this.contrast,
    ): Colors {
        return Colors(
            primary = primary.copy(),
            surface = surface.copy(),
            contrast = contrast.copy(),
        )
    }

    @Composable
    @ReadOnlyComposable
    public fun contentColorFor(
        color: Color,
    ): Color {
        return when (color) {
            else -> Color.Unspecified
        }
    }

    @Stable
    public class Primary(
        soft: Color,
        main: Color,
        public val nested: Nested,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Primary,
        ) {
            soft = other.soft
            main = other.main
            nested.update(other.nested)
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
            nested: Nested = this.nested,
        ): Primary {
            return Primary(
                soft = soft.copy(),
                main = main.copy(),
                nested = nested.copy(),
            )
        }

        @Stable
        public class Nested(
            main: Color,
        ) {

            public var main: Color by mutableStateOf(main)
                private set

            internal fun update(
                other: Nested,
            ) {
                main = other.main
            }

            internal fun copy(
                main: Color = this.main,
            ): Nested {
                return Nested(
                    main = main.copy(),
                )
            }
        }
    }

    @Stable
    public class Surface(
        contrast: Color,
        main: Color,
    ) {

        public var contrast: Color by mutableStateOf(contrast)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Surface,
        ) {
            contrast = other.contrast
            main = other.main
        }

        internal fun copy(
            contrast: Color = this.contrast,
            main: Color = this.main,
        ): Surface {
            return Surface(
                contrast = contrast.copy(),
                main = main.copy(),
            )
        }
    }

    @Stable
    public class Contrast(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Contrast,
        ) {
            main = other.main
            soft = other.soft
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Contrast {
            return Contrast(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }
}
