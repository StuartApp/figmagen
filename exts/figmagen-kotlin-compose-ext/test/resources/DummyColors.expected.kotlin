package com.stuart.shared.ui.design.system.core

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color

internal val lightColors: Colors =
    Colors(
        primary = lightPrimary,
        surface = lightSurface,
        tertiary = lightTertiary,
        secondary = lightSecondary,
        disabled = lightDisabled,
    )

private val lightPrimary: Colors.Primary
    get() =
        Colors.Primary(
            soft = lightPrimarySoft,
            main = lightPrimaryMain,
            contrast = lightPrimaryContrast,
        )

private val lightPrimarySoft: Color
    get() =
        Color(
            red = 0.8F,
            green = 0.87058824F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryMain: Color
    get() =
        Color(
            red = 0.0F,
            green = 0.35686275F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryContrast: Colors.Primary.Contrast
    get() =
        Colors.Primary.Contrast(
            main = lightPrimaryContrastMain,
            high = lightPrimaryContrastHigh,
        )

private val lightPrimaryContrastMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryContrastHigh: Color
    get() =
        Color(
            red = 0.0F,
            green = 1.0F,
            blue = 0.0F,
            alpha = 1.0F,
        )

private val lightSurface: Colors.Surface
    get() =
        Colors.Surface(
            soft = lightSurfaceSoft,
            main = lightSurfaceMain,
            contrast = lightSurfaceContrast,
        )

private val lightSurfaceSoft: Color
    get() =
        Color(
            red = 0.93333334F,
            green = 0.96862745F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightSurfaceMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightSurfaceContrast: Colors.Surface.Contrast
    get() =
        Colors.Surface.Contrast(
            main = lightSurfaceContrastMain,
            high = lightSurfaceContrastHigh,
        )

private val lightSurfaceContrastMain: Color
    get() =
        Color(
            red = 0.21568628F,
            green = 0.25490198F,
            blue = 0.31764707F,
            alpha = 1.0F,
        )

private val lightSurfaceContrastHigh: Color
    get() =
        Color(
            red = 0.5019608F,
            green = 0.0F,
            blue = 0.5019608F,
            alpha = 1.0F,
        )

private val lightTertiary: Colors.Tertiary
    get() =
        Colors.Tertiary(
            soft = lightTertiarySoft,
            main = lightTertiaryMain,
        )

private val lightTertiarySoft: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.9764706F,
            blue = 0.9137255F,
            alpha = 1.0F,
        )

private val lightTertiaryMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.7529412F,
            blue = 0.18431373F,
            alpha = 1.0F,
        )

private val lightSecondary: Colors.Secondary
    get() =
        Colors.Secondary(
            soft = lightSecondarySoft,
            main = lightSecondaryMain,
        )

private val lightSecondarySoft: Color
    get() =
        Color(
            red = 0.83137256F,
            green = 0.9411765F,
            blue = 0.92941177F,
            alpha = 1.0F,
        )

private val lightSecondaryMain: Color
    get() =
        Color(
            red = 0.23137255F,
            green = 0.80784315F,
            blue = 0.6745098F,
            alpha = 1.0F,
        )

private val lightDisabled: Colors.Disabled
    get() =
        Colors.Disabled(
            soft = lightDisabledSoft,
            main = lightDisabledMain,
        )

private val lightDisabledSoft: Color
    get() =
        Color(
            red = 0.81960785F,
            green = 0.8352941F,
            blue = 0.85882354F,
            alpha = 1.0F,
        )

private val lightDisabledMain: Color
    get() =
        Color(
            red = 0.5921569F,
            green = 0.6392157F,
            blue = 0.6862745F,
            alpha = 1.0F,
        )

internal val darkColors: Colors =
    Colors(
        primary = darkPrimary,
        surface = darkSurface,
        tertiary = darkTertiary,
        secondary = darkSecondary,
        disabled = darkDisabled,
    )

private val darkPrimary: Colors.Primary
    get() =
        Colors.Primary(
            contrast = darkPrimaryContrast,
            soft = darkPrimarySoft,
            main = darkPrimaryMain,
        )

private val darkPrimaryContrast: Colors.Primary.Contrast
    get() =
        Colors.Primary.Contrast(
            main = darkPrimaryContrastMain,
            high = darkPrimaryContrastHigh,
        )

private val darkPrimaryContrastMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val darkPrimaryContrastHigh: Color
    get() =
        Color(
            red = 0.0F,
            green = 1.0F,
            blue = 0.76F,
            alpha = 1.0F,
        )

private val darkPrimarySoft: Color
    get() =
        Color(
            red = 0.18350515F,
            green = 0.2804982F,
            blue = 0.4583185F,
            alpha = 1.0F,
        )

private val darkPrimaryMain: Color
    get() =
        Color(
            red = 0.15686275F,
            green = 0.43529412F,
            blue = 0.92941177F,
            alpha = 1.0F,
        )

private val darkSurface: Colors.Surface
    get() =
        Colors.Surface(
            contrast = darkSurfaceContrast,
            main = darkSurfaceMain,
            soft = darkSurfaceSoft,
        )

private val darkSurfaceContrast: Colors.Surface.Contrast
    get() =
        Colors.Surface.Contrast(
            main = darkSurfaceContrastMain,
            high = darkSurfaceContrastHigh,
        )

private val darkSurfaceContrastMain: Color
    get() =
        Color(
            red = 0.9585108F,
            green = 0.9585108F,
            blue = 0.9585108F,
            alpha = 1.0F,
        )

private val darkSurfaceContrastHigh: Color
    get() =
        Color(
            red = 0.37145114F,
            green = 0.0F,
            blue = 0.5019608F,
            alpha = 1.0F,
        )

private val darkSurfaceMain: Color
    get() =
        Color(
            red = 0.15415183F,
            green = 0.15415183F,
            blue = 0.15415183F,
            alpha = 1.0F,
        )

private val darkSurfaceSoft: Color
    get() =
        Color(
            red = 0.21568628F,
            green = 0.24313726F,
            blue = 0.27058825F,
            alpha = 1.0F,
        )

private val darkTertiary: Colors.Tertiary
    get() =
        Colors.Tertiary(
            main = darkTertiaryMain,
            soft = darkTertiarySoft,
        )

private val darkTertiaryMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.7529412F,
            blue = 0.18431373F,
            alpha = 1.0F,
        )

private val darkTertiarySoft: Color
    get() =
        Color(
            red = 0.5568628F,
            green = 0.4862745F,
            blue = 0.2901961F,
            alpha = 1.0F,
        )

private val darkSecondary: Colors.Secondary
    get() =
        Colors.Secondary(
            soft = darkSecondarySoft,
            main = darkSecondaryMain,
        )

private val darkSecondarySoft: Color
    get() =
        Color(
            red = 0.37254903F,
            green = 0.627451F,
            blue = 0.6F,
            alpha = 1.0F,
        )

private val darkSecondaryMain: Color
    get() =
        Color(
            red = 0.23137255F,
            green = 0.80784315F,
            blue = 0.6745098F,
            alpha = 1.0F,
        )

private val darkDisabled: Colors.Disabled
    get() =
        Colors.Disabled(
            main = darkDisabledMain,
            soft = darkDisabledSoft,
        )

private val darkDisabledMain: Color
    get() =
        Color(
            red = 0.3254902F,
            green = 0.3529412F,
            blue = 0.38431373F,
            alpha = 1.0F,
        )

private val darkDisabledSoft: Color
    get() =
        Color(
            red = 0.4392157F,
            green = 0.4627451F,
            blue = 0.5058824F,
            alpha = 1.0F,
        )

@Stable
public class Colors(
    public val primary: Primary,
    public val surface: Surface,
    public val tertiary: Tertiary,
    public val secondary: Secondary,
    public val disabled: Disabled,
) {

    internal fun update(
        other: Colors,
    ) {
        primary.update(other.primary)
        surface.update(other.surface)
        tertiary.update(other.tertiary)
        secondary.update(other.secondary)
        disabled.update(other.disabled)
    }

    internal fun copy(
        primary: Primary = this.primary,
        surface: Surface = this.surface,
        tertiary: Tertiary = this.tertiary,
        secondary: Secondary = this.secondary,
        disabled: Disabled = this.disabled,
    ): Colors {
        return Colors(
            primary = primary.copy(),
            surface = surface.copy(),
            tertiary = tertiary.copy(),
            secondary = secondary.copy(),
            disabled = disabled.copy(),
        )
    }

    @Composable
    @ReadOnlyComposable
    public fun contentColorFor(
        color: Color,
    ): Color {
        return when (color) {
            primary.main -> primary.contrast.main
            surface.main -> surface.contrast.main
            else -> Color.Unspecified
        }
    }

    @Stable
    public class Primary(
        soft: Color,
        main: Color,
        public val contrast: Contrast,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Primary,
        ) {
            soft = other.soft
            main = other.main
            contrast.update(other.contrast)
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
            contrast: Contrast = this.contrast,
        ): Primary {
            return Primary(
                soft = soft.copy(),
                main = main.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            main: Color,
            high: Color,
        ) {

            public var main: Color by mutableStateOf(main)
                private set

            public var high: Color by mutableStateOf(high)
                private set

            internal fun update(
                other: Contrast,
            ) {
                main = other.main
                high = other.high
            }

            internal fun copy(
                main: Color = this.main,
                high: Color = this.high,
            ): Contrast {
                return Contrast(
                    main = main.copy(),
                    high = high.copy(),
                )
            }
        }
    }

    @Stable
    public class Surface(
        soft: Color,
        main: Color,
        public val contrast: Contrast,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Surface,
        ) {
            soft = other.soft
            main = other.main
            contrast.update(other.contrast)
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
            contrast: Contrast = this.contrast,
        ): Surface {
            return Surface(
                soft = soft.copy(),
                main = main.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            main: Color,
            high: Color,
        ) {

            public var main: Color by mutableStateOf(main)
                private set

            public var high: Color by mutableStateOf(high)
                private set

            internal fun update(
                other: Contrast,
            ) {
                main = other.main
                high = other.high
            }

            internal fun copy(
                main: Color = this.main,
                high: Color = this.high,
            ): Contrast {
                return Contrast(
                    main = main.copy(),
                    high = high.copy(),
                )
            }
        }
    }

    @Stable
    public class Tertiary(
        soft: Color,
        main: Color,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Tertiary,
        ) {
            soft = other.soft
            main = other.main
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
        ): Tertiary {
            return Tertiary(
                soft = soft.copy(),
                main = main.copy(),
            )
        }
    }

    @Stable
    public class Secondary(
        soft: Color,
        main: Color,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Secondary,
        ) {
            soft = other.soft
            main = other.main
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
        ): Secondary {
            return Secondary(
                soft = soft.copy(),
                main = main.copy(),
            )
        }
    }

    @Stable
    public class Disabled(
        soft: Color,
        main: Color,
    ) {

        public var soft: Color by mutableStateOf(soft)
            private set

        public var main: Color by mutableStateOf(main)
            private set

        internal fun update(
            other: Disabled,
        ) {
            soft = other.soft
            main = other.main
        }

        internal fun copy(
            soft: Color = this.soft,
            main: Color = this.main,
        ): Disabled {
            return Disabled(
                soft = soft.copy(),
                main = main.copy(),
            )
        }
    }
}
