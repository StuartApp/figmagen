package com.stuart.shared.ui.design.system.core

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.takeOrElse

internal val lightColors: Colors =
    Colors(
        primary = lightPrimary,
        secondary = lightSecondary,
        tertiary = lightTertiary,
        surface = lightSurface,
        disabled = lightDisabled,
    )

private val lightPrimary: Primary =
    Primary(
        main = lightPrimaryMain,
        soft = lightPrimarySoft,
        contrast = lightPrimaryContrast,
    )

private val lightPrimaryMain: Color =
    Color(
        red = 0.0,
        green = 0.36,
        blue = 1.0,
        alpha = 1.0,
    )

private val lightPrimarySoft: Color =
    Color(
        red = 0.8,
        green = 0.87,
        blue = 1.0,
        alpha = 1.0,
    )

private val lightPrimaryContrast: Contrast =
    Contrast(
        main = lightPrimaryContrastMain,
        high = lightPrimaryContrastHigh,
    )

private val lightPrimaryContrastMain: Color =
    Color(
        red = 1.0,
        green = 1.0,
        blue = 1.0,
        alpha = 1.0,
    )

private val lightPrimaryContrastHigh: Color =
    Color(
        red = 0.0,
        green = 1.0,
        blue = 0.0,
        alpha = 1.0,
    )

private val lightSecondary: Secondary =
    Secondary(
        main = lightSecondaryMain,
        soft = lightSecondarySoft,
    )

private val lightSecondaryMain: Color =
    Color(
        red = 0.23,
        green = 0.81,
        blue = 0.67,
        alpha = 1.0,
    )

private val lightSecondarySoft: Color =
    Color(
        red = 0.83,
        green = 0.94,
        blue = 0.93,
        alpha = 1.0,
    )

private val lightTertiary: Tertiary =
    Tertiary(
        main = lightTertiaryMain,
        soft = lightTertiarySoft,
    )

private val lightTertiaryMain: Color =
    Color(
        red = 1.0,
        green = 0.75,
        blue = 0.18,
        alpha = 1.0,
    )

private val lightTertiarySoft: Color =
    Color(
        red = 1.0,
        green = 0.98,
        blue = 0.91,
        alpha = 1.0,
    )

private val lightSurface: Surface =
    Surface(
        main = lightSurfaceMain,
        soft = lightSurfaceSoft,
        contrast = lightSurfaceContrast,
    )

private val lightSurfaceMain: Color =
    Color(
        red = 1.0,
        green = 1.0,
        blue = 1.0,
        alpha = 1.0,
    )

private val lightSurfaceSoft: Color =
    Color(
        red = 0.93,
        green = 0.97,
        blue = 1.0,
        alpha = 1.0,
    )

private val lightSurfaceContrast: Contrast =
    Contrast(
        high = lightSurfaceContrastHigh,
        main = lightSurfaceContrastMain,
    )

private val lightSurfaceContrastHigh: Color =
    Color(
        red = 0.5,
        green = 0.0,
        blue = 0.5,
        alpha = 1.0,
    )

private val lightSurfaceContrastMain: Color =
    Color(
        red = 0.22,
        green = 0.25,
        blue = 0.32,
        alpha = 1.0,
    )

private val lightDisabled: Disabled =
    Disabled(
        main = lightDisabledMain,
        soft = lightDisabledSoft,
    )

private val lightDisabledMain: Color =
    Color(
        red = 0.59,
        green = 0.64,
        blue = 0.69,
        alpha = 1.0,
    )

private val lightDisabledSoft: Color =
    Color(
        red = 0.82,
        green = 0.84,
        blue = 0.86,
        alpha = 1.0,
    )

@Stable
public class Colors(
    public val primary: Primary,
    public val secondary: Secondary,
    public val tertiary: Tertiary,
    public val surface: Surface,
    public val disabled: Disabled,
) {

    internal fun update(
        other: Colors,
    ) {
        primary.update(other.primary)
        secondary.update(other.secondary)
        tertiary.update(other.tertiary)
        surface.update(other.surface)
        disabled.update(other.disabled)
    }

    internal fun copy(
        primary: Primary = this.primary,
        secondary: Secondary = this.secondary,
        tertiary: Tertiary = this.tertiary,
        surface: Surface = this.surface,
        disabled: Disabled = this.disabled,
    ): Colors {
        return Colors(
            primary = primary.copy(),
            secondary = secondary.copy(),
            tertiary = tertiary.copy(),
            surface = surface.copy(),
            disabled = disabled.copy(),
        )
    }

    public fun contentColorFor(
        color: Color,
    ): Colors {
        return when (color) {
            primary.main -> primary.contrast.main
            surface.main -> surface.contrast.main
            else -> Color.Unspecified
        }
    }

    @Stable
    public class Primary(
        main: Color,
        soft: Color,
        public val contrast: Contrast,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Primary,
        ) {
            main.update(other.main)
            soft.update(other.soft)
            contrast.update(other.contrast)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
            contrast: Contrast = this.contrast,
        ): Primary {
            return Primary(
                main = main.copy(),
                soft = soft.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            main: Color,
            high: Color,
        ) {

            public var main: Color by mutableStateOf(main)
                private set

            public var high: Color by mutableStateOf(high)
                private set

            internal fun update(
                other: Contrast,
            ) {
                main.update(other.main)
                high.update(other.high)
            }

            internal fun copy(
                main: Color = this.main,
                high: Color = this.high,
            ): Contrast {
                return Contrast(
                    main = main.copy(),
                    high = high.copy(),
                )
            }
        }
    }

    @Stable
    public class Secondary(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Secondary,
        ) {
            main.update(other.main)
            soft.update(other.soft)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Secondary {
            return Secondary(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }

    @Stable
    public class Tertiary(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Tertiary,
        ) {
            main.update(other.main)
            soft.update(other.soft)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Tertiary {
            return Tertiary(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }

    @Stable
    public class Surface(
        main: Color,
        soft: Color,
        public val contrast: Contrast,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Surface,
        ) {
            main.update(other.main)
            soft.update(other.soft)
            contrast.update(other.contrast)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
            contrast: Contrast = this.contrast,
        ): Surface {
            return Surface(
                main = main.copy(),
                soft = soft.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            high: Color,
            main: Color,
        ) {

            public var high: Color by mutableStateOf(high)
                private set

            public var main: Color by mutableStateOf(main)
                private set

            internal fun update(
                other: Contrast,
            ) {
                high.update(other.high)
                main.update(other.main)
            }

            internal fun copy(
                high: Color = this.high,
                main: Color = this.main,
            ): Contrast {
                return Contrast(
                    high = high.copy(),
                    main = main.copy(),
                )
            }
        }
    }

    @Stable
    public class Disabled(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Disabled,
        ) {
            main.update(other.main)
            soft.update(other.soft)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Disabled {
            return Disabled(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }
}
