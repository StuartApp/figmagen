package com.stuart.shared.ui.design.system.core

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color

internal val lightColors: Colors =
    Colors(
        primary = lightPrimary,
        secondary = lightSecondary,
        tertiary = lightTertiary,
        surface = lightSurface,
        disabled = lightDisabled,
    )

private val lightPrimary: Colors.Primary
    get() =
        Colors.Primary(
            main = lightPrimaryMain,
            soft = lightPrimarySoft,
            contrast = lightPrimaryContrast,
        )

private val lightPrimaryMain: Color
    get() =
        Color(
            red = 0.0F,
            green = 0.36F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimarySoft: Color
    get() =
        Color(
            red = 0.8F,
            green = 0.87F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryContrast: Colors.Primary.Contrast
    get() =
        Colors.Primary.Contrast(
            main = lightPrimaryContrastMain,
            high = lightPrimaryContrastHigh,
        )

private val lightPrimaryContrastMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightPrimaryContrastHigh: Color
    get() =
        Color(
            red = 0.0F,
            green = 1.0F,
            blue = 0.0F,
            alpha = 1.0F,
        )

private val lightSecondary: Colors.Secondary
    get() =
        Colors.Secondary(
            main = lightSecondaryMain,
            soft = lightSecondarySoft,
        )

private val lightSecondaryMain: Color
    get() =
        Color(
            red = 0.23F,
            green = 0.81F,
            blue = 0.67F,
            alpha = 1.0F,
        )

private val lightSecondarySoft: Color
    get() =
        Color(
            red = 0.83F,
            green = 0.94F,
            blue = 0.93F,
            alpha = 1.0F,
        )

private val lightTertiary: Colors.Tertiary
    get() =
        Colors.Tertiary(
            main = lightTertiaryMain,
            soft = lightTertiarySoft,
        )

private val lightTertiaryMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.75F,
            blue = 0.18F,
            alpha = 1.0F,
        )

private val lightTertiarySoft: Color
    get() =
        Color(
            red = 1.0F,
            green = 0.98F,
            blue = 0.91F,
            alpha = 1.0F,
        )

private val lightSurface: Colors.Surface
    get() =
        Colors.Surface(
            main = lightSurfaceMain,
            soft = lightSurfaceSoft,
            contrast = lightSurfaceContrast,
        )

private val lightSurfaceMain: Color
    get() =
        Color(
            red = 1.0F,
            green = 1.0F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightSurfaceSoft: Color
    get() =
        Color(
            red = 0.93F,
            green = 0.97F,
            blue = 1.0F,
            alpha = 1.0F,
        )

private val lightSurfaceContrast: Colors.Surface.Contrast
    get() =
        Colors.Surface.Contrast(
            high = lightSurfaceContrastHigh,
            main = lightSurfaceContrastMain,
        )

private val lightSurfaceContrastHigh: Color
    get() =
        Color(
            red = 0.5F,
            green = 0.0F,
            blue = 0.5F,
            alpha = 1.0F,
        )

private val lightSurfaceContrastMain: Color
    get() =
        Color(
            red = 0.22F,
            green = 0.25F,
            blue = 0.32F,
            alpha = 1.0F,
        )

private val lightDisabled: Colors.Disabled
    get() =
        Colors.Disabled(
            main = lightDisabledMain,
            soft = lightDisabledSoft,
        )

private val lightDisabledMain: Color
    get() =
        Color(
            red = 0.59F,
            green = 0.64F,
            blue = 0.69F,
            alpha = 1.0F,
        )

private val lightDisabledSoft: Color
    get() =
        Color(
            red = 0.82F,
            green = 0.84F,
            blue = 0.86F,
            alpha = 1.0F,
        )

@Stable
public class Colors(
    public val primary: Primary,
    public val secondary: Secondary,
    public val tertiary: Tertiary,
    public val surface: Surface,
    public val disabled: Disabled,
) {

    internal fun update(
        other: Colors,
    ) {
        primary.update(other.primary)
        secondary.update(other.secondary)
        tertiary.update(other.tertiary)
        surface.update(other.surface)
        disabled.update(other.disabled)
    }

    internal fun copy(
        primary: Primary = this.primary,
        secondary: Secondary = this.secondary,
        tertiary: Tertiary = this.tertiary,
        surface: Surface = this.surface,
        disabled: Disabled = this.disabled,
    ): Colors {
        return Colors(
            primary = primary.copy(),
            secondary = secondary.copy(),
            tertiary = tertiary.copy(),
            surface = surface.copy(),
            disabled = disabled.copy(),
        )
    }

    @Composable
    @ReadOnlyComposable
    public fun contentColorFor(
        color: Color,
    ): Color {
        return when (color) {
            primary.main -> primary.contrast.main
            surface.main -> surface.contrast.main
            else -> Color.Unspecified
        }
    }

    @Stable
    public class Primary(
        main: Color,
        soft: Color,
        public val contrast: Contrast,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Primary,
        ) {
            main = other.main
            soft = other.soft
            contrast.update(other.contrast)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
            contrast: Contrast = this.contrast,
        ): Primary {
            return Primary(
                main = main.copy(),
                soft = soft.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            main: Color,
            high: Color,
        ) {

            public var main: Color by mutableStateOf(main)
                private set

            public var high: Color by mutableStateOf(high)
                private set

            internal fun update(
                other: Contrast,
            ) {
                main = other.main
                high = other.high
            }

            internal fun copy(
                main: Color = this.main,
                high: Color = this.high,
            ): Contrast {
                return Contrast(
                    main = main.copy(),
                    high = high.copy(),
                )
            }
        }
    }

    @Stable
    public class Secondary(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Secondary,
        ) {
            main = other.main
            soft = other.soft
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Secondary {
            return Secondary(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }

    @Stable
    public class Tertiary(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Tertiary,
        ) {
            main = other.main
            soft = other.soft
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Tertiary {
            return Tertiary(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }

    @Stable
    public class Surface(
        main: Color,
        soft: Color,
        public val contrast: Contrast,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Surface,
        ) {
            main = other.main
            soft = other.soft
            contrast.update(other.contrast)
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
            contrast: Contrast = this.contrast,
        ): Surface {
            return Surface(
                main = main.copy(),
                soft = soft.copy(),
                contrast = contrast.copy(),
            )
        }

        @Stable
        public class Contrast(
            high: Color,
            main: Color,
        ) {

            public var high: Color by mutableStateOf(high)
                private set

            public var main: Color by mutableStateOf(main)
                private set

            internal fun update(
                other: Contrast,
            ) {
                high = other.high
                main = other.main
            }

            internal fun copy(
                high: Color = this.high,
                main: Color = this.main,
            ): Contrast {
                return Contrast(
                    high = high.copy(),
                    main = main.copy(),
                )
            }
        }
    }

    @Stable
    public class Disabled(
        main: Color,
        soft: Color,
    ) {

        public var main: Color by mutableStateOf(main)
            private set

        public var soft: Color by mutableStateOf(soft)
            private set

        internal fun update(
            other: Disabled,
        ) {
            main = other.main
            soft = other.soft
        }

        internal fun copy(
            main: Color = this.main,
            soft: Color = this.soft,
        ): Disabled {
            return Disabled(
                main = main.copy(),
                soft = soft.copy(),
            )
        }
    }
}
